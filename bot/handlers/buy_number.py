import asyncio
import logging
from pyrogram import Client, filters
from pyrogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from pyrogram.handlers import CallbackQueryHandler
from bot.api import SmsActivateAPI
from bot.db import Database
from bot.utils import create_paginated_keyboard

# This will hold the full list of countries and services to avoid re-fetching
# during a single user session. It's a simple cache.
COUNTRY_LIST = []
SERVICE_LIST = {} # We will store services by country ID

class BuyNumberHandlers:
    def __init__(self, db: Database, api: SmsActivateAPI):
        self.db = db
        self.api = api

    def get_handlers(self):
        return [
            CallbackQueryHandler(self.show_countries, filters.regex("^buy_menu$")),
            CallbackQueryHandler(self.show_countries_paginated, filters.regex(r"^buy_country_page:(\d+)$")),
            CallbackQueryHandler(self.show_services, filters.regex(r"^buy_country:(\d+)$")),
            CallbackQueryHandler(self.purchase_number, filters.regex(r"^buy_service:(.+):(\d+)$")),
        ]

    async def show_countries(self, client: Client, callback_query: CallbackQuery, page=0):
        await callback_query.answer("–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω...")
        try:
            # Fetch countries if the cache is empty
            if not COUNTRY_LIST:
                countries_data = await self.api._request("getCountries") # Assuming this endpoint exists as per docs
                # The provided doc has a strange format, let's assume it's a dict of dicts
                # {'0': {'id': 0, 'rus': '–†–æ—Å—Å–∏—è', ...}}
                if isinstance(countries_data, dict):
                    # Sort by the Russian name
                    COUNTRY_LIST.extend(sorted(countries_data.values(), key=lambda x: x['rus']))
                else:
                    raise Exception("Unexpected country list format")

            buttons = [(f"{c['rus']}", f"buy_country:{c['id']}") for c in COUNTRY_LIST]
            keyboard = create_paginated_keyboard(buttons, page, 15, "buy_country_page")
            keyboard.inline_keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
            await callback_query.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:", reply_markup=keyboard)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω: {e}")
            await callback_query.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def show_countries_paginated(self, client: Client, callback_query: CallbackQuery):
        page = int(callback_query.matches[0].group(1))
        await self.show_countries(client, callback_query, page=page)

    async def show_services(self, client: Client, callback_query: CallbackQuery, page=0):
        country_id = int(callback_query.matches[0].group(1))
        await callback_query.answer("–ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
        try:
            # Use getPrices to get available services and their cost for a country
            prices_data = await self.api.get_prices(country=country_id)
            country_prices = prices_data.get(str(country_id), {})

            if not country_prices:
                await callback_query.message.edit_text("–î–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω—ã –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ç—Ä–∞–Ω–∞–º", callback_data="buy_menu")]]))
                return

            buttons = [(f"{service} - {details['cost']} RUB ({details['count']} —à—Ç.)", f"buy_service:{service}:{country_id}") for service, details in country_prices.items()]
            keyboard = create_paginated_keyboard(buttons, page, 15, f"buy_service_page:{country_id}")
            keyboard.inline_keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ç—Ä–∞–Ω–∞–º", callback_data="buy_menu")])
            await callback_query.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å:", reply_markup=keyboard)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
            await callback_query.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤.")

    async def purchase_number(self, client: Client, callback_query: CallbackQuery):
        service_code = callback_query.matches[0].group(1)
        country_id = int(callback_query.matches[0].group(2))
        user_id = callback_query.from_user.id

        await callback_query.message.edit_text("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏...")
        try:
            prices_data = await self.api.get_prices(country=country_id, service=service_code)
            cost_rub = float(prices_data[str(country_id)][service_code]['cost'])
            cost_kopecks = int(cost_rub * 100)
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å: {e}")
            await callback_query.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–Ω—ã.")
            return

        if not self.db.create_transaction(user_id, -cost_kopecks, 'purchase', f"–ü–æ–∫—É–ø–∫–∞ {service_code}"):
            await callback_query.message.edit_text("‚ùå –ü–æ–∫—É–ø–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å! –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º –±–∞–ª–∞–Ω—Å–µ.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üë§ –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="account_menu")]]))
            return

        try:
            purchase_response = await self.api.get_number(service_code, country_id)
            # Response format is ACCESS_NUMBER:ID:NUMBER
            if "ACCESS_NUMBER" in purchase_response:
                parts = purchase_response.split(':')
                activation_id = int(parts[1])
                phone_number = parts[2]

                self.db.log_purchase(user_id, activation_id, service_code, str(country_id), phone_number)

                await callback_query.message.edit_text(f"‚úÖ **–ù–æ–º–µ—Ä –ø–æ–ª—É—á–µ–Ω!**\n\n**–ù–æ–º–µ—Ä:** `{phone_number}`\n**–°–µ—Ä–≤–∏—Å:** {service_code}\n\n–û–∂–∏–¥–∞—é –°–ú–°...")
                asyncio.create_task(self.poll_for_sms(callback_query, activation_id))
            else:
                logging.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ: {purchase_response}. –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤.")
                self.db.create_transaction(user_id, cost_kopecks, 'refund', f"–í–æ–∑–≤—Ä–∞—Ç –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: {purchase_response}")
                await callback_query.message.edit_text(f"‚ùå **–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏!**\n–ü—Ä–∏—á–∏–Ω–∞: `{purchase_response}`\n\n–°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.")
        except Exception as e:
            logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ: {e}. –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤.")
            self.db.create_transaction(user_id, cost_kopecks, 'refund', f"–í–æ–∑–≤—Ä–∞—Ç –∏–∑-–∑–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–π –æ—à–∏–±–∫–∏: {e}")
            await callback_query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.")

    async def poll_for_sms(self, callback_query: CallbackQuery, activation_id: int):
        max_wait_time = 600  # 10 minutes
        poll_interval = 10
        elapsed_time = 0

        while elapsed_time < max_wait_time:
            await asyncio.sleep(poll_interval)
            elapsed_time += poll_interval

            try:
                status_response = await self.api.get_status(activation_id)
                # Format: STATUS_WAIT_CODE, STATUS_OK:CODE, etc.
                if "STATUS_OK" in status_response:
                    sms_code = status_response.split(':')[1]
                    await callback_query.message.reply_text(f"‚úâÔ∏è **–ü–æ–ª—É—á–µ–Ω–æ –°–ú–°!**\n\n–ö–æ–¥: `{sms_code}`")
                    await self.api.set_status(activation_id, 6) # Finish activation
                    return
                elif "STATUS_WAIT_RETRY" in status_response:
                    # You could add a button here to ask the user if they want to get another SMS
                    pass # Just continue polling for now
                elif "STATUS_CANCEL" in status_response:
                    await callback_query.message.reply_text("‚ùå –ê–∫—Ç–∏–≤–∞—Ü–∏—è –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                    return
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –°–ú–° (ID: {activation_id}): {e}")

        await callback_query.message.reply_text("–û–∂–∏–¥–∞–Ω–∏–µ –°–ú–° –∑–∞–≤–µ—Ä—à–µ–Ω–æ (10 –º–∏–Ω—É—Ç).")
        await self.api.set_status(activation_id, 8) # Cancel activation after timeout
