import asyncio
import logging
from pyrogram import Client, filters
from pyrogram.types import CallbackQuery
from pyrogram.handlers import CallbackQueryHandler
from bot.api import OnlineSimAPI
from bot.db import Database
from bot.utils import create_paginated_keyboard

import asyncio
import logging
from pyrogram import Client, filters
from pyrogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from pyrogram.handlers import CallbackQueryHandler
from bot.api import OnlineSimAPI
from bot.db import Database
from bot.utils import create_paginated_keyboard

from bot.cache import get_buy_tariffs

class BuyNumberHandlers:
    def __init__(self, db: Database, api: OnlineSimAPI):
        self.db = db
        self.api = api

    def get_handlers(self):
        return [
            CallbackQueryHandler(self.show_countries, filters.regex("^buy_menu$")),
            CallbackQueryHandler(self.show_countries_paginated, filters.regex(r"^buy_country_page:(\d+)$")),
            CallbackQueryHandler(self.show_services, filters.regex(r"^buy_country:(\d+)$")),
            CallbackQueryHandler(self.show_services_paginated, filters.regex(r"^buy_service_page:(\d+):(\d+)$")),
            CallbackQueryHandler(self.purchase_number, filters.regex(r"^buy_service:(.+):(\d+)$")),
        ]

    async def show_countries(self, client: Client, callback_query: CallbackQuery, page=0):
        await callback_query.answer("–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω...")
        try:
            buy_tariffs = get_buy_tariffs()
            countries = sorted(buy_tariffs.get("countries", []), key=lambda x: x['name_en'])
            buttons = [(f"üá∫üá∏ {c['name_en']}", f"buy_country:{c['id']}") for c in countries]

            keyboard = create_paginated_keyboard(buttons, page, 15, "buy_country_page")
            keyboard.inline_keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
            await callback_query.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:", reply_markup=keyboard)
        except Exception as e:
            error_text = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —Å–æ–∑–¥–∞–ª–∏ —Ñ–∞–π–ª `tariffs.json`, –∑–∞–ø—É—Å—Ç–∏–≤ `python fetch_tariffs.py`."
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω: {e}")
            if callback_query.message.text != error_text:
                await callback_query.message.edit_text(error_text)

    async def show_countries_paginated(self, client: Client, callback_query: CallbackQuery):
        page = int(callback_query.matches[0].group(1))
        await self.show_countries(client, callback_query, page=page)

    async def show_services(self, client: Client, callback_query: CallbackQuery, page=0):
        country_id = int(callback_query.matches[0].group(1))
        await callback_query.answer("–ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
        try:
            buy_tariffs = get_buy_tariffs()
            country_services = [s for s in buy_tariffs.get("services", []) if s['country'] == country_id and s.get('count', 0) > 0]

            if not country_services:
                await callback_query.message.edit_text("–î–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω—ã –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ç—Ä–∞–Ω–∞–º", callback_data="buy_menu")]]))
                return

            buttons = [(f"{s['service']} - {s['price']} RUB", f"buy_service:{s['id']}:{country_id}") for s in country_services]
            callback_prefix = f"buy_service_page:{country_id}"
            keyboard = create_paginated_keyboard(buttons, page, 15, callback_prefix)
            keyboard.inline_keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ç—Ä–∞–Ω–∞–º", callback_data="buy_menu")])
            await callback_query.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å:", reply_markup=keyboard)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
            await callback_query.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª `tariffs.json` —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

    async def show_services_paginated(self, client: Client, callback_query: CallbackQuery):
        country_id = int(callback_query.matches[0].group(1))
        page = int(callback_query.matches[0].group(2))
        # We need to simulate the original callback for show_services
        callback_query.matches[0].group = lambda i: str(country_id) if i == 1 else None
        await self.show_services(client, callback_query, page=page)

    async def purchase_number(self, client: Client, callback_query: CallbackQuery):
        service_id_str = callback_query.matches[0].group(1)
        country_id = int(callback_query.matches[0].group(2))
        user_id = callback_query.from_user.id

        await callback_query.message.edit_text("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏...")

        try:
            buy_tariffs = get_buy_tariffs()
            service_info = next((s for s in buy_tariffs.get("services", []) if s['id'] == service_id_str and s['country'] == country_id), None)
            if not service_info:
                await callback_query.message.edit_text("–û—à–∏–±–∫–∞: –°–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω.")
                return
            cost = int(float(service_info['price']) * 100)
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞: {e}")
            await callback_query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–Ω—ã.")
            return

        transaction_success = self.db.create_transaction(
            user_telegram_id=user_id,
            amount=-cost,
            type='purchase',
            details=f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ {service_id_str} –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country_id}"
        )

        if not transaction_success:
            await callback_query.message.edit_text(
                "‚ùå **–ü–æ–∫—É–ø–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å!**\n\n–ù–∞ –≤–∞—à–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á–µ—Ç.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üë§ –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="account_menu")
                ]])
            )
            return

        try:
            purchase_data = await self.api.get_num(service_id_str, country_id)
            if purchase_data.get("response") == "1":
                tzid = purchase_data["tzid"]
                phone_number = purchase_data["number"]
                self.db.log_purchase(user_id, tzid, service_id_str, str(country_id), phone_number)
                await callback_query.message.edit_text(
                    f"‚úÖ **–ù–æ–º–µ—Ä –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω!**\n\n"
                    f"**–ù–æ–º–µ—Ä:** `{phone_number}`\n"
                    f"**–°–µ—Ä–≤–∏—Å:** {service_info['service']}\n\n"
                    "–û–∂–∏–¥–∞—é –°–ú–°... –Ø —Å–æ–æ–±—â—É, –∫–æ–≥–¥–∞ –æ–Ω–æ –ø—Ä–∏–¥–µ—Ç."
                )
                asyncio.create_task(self.poll_for_sms(callback_query, tzid))
            else:
                error = purchase_data.get("error_msg", "Unknown error")
                logging.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {error}. –í–æ–∑–≤—Ä–∞—â–∞—é —Å—Ä–µ–¥—Å—Ç–≤–∞.")
                self.db.create_transaction(user_id, cost, 'refund', f"–í–æ–∑–≤—Ä–∞—Ç –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø–æ–∫—É–ø–∫–∏. –ü—Ä–∏—á–∏–Ω–∞: {error}")
                await callback_query.message.edit_text(
                    f"‚ùå **–ü–æ–∫—É–ø–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å!**\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: `{error}`\n\n–í–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ —Å—É–º–º—É –ø–æ–∫—É–ø–∫–∏.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–µ—Ä–≤–∏—Å–∞–º", f"buy_country:{country_id}")]]))
        except Exception as e:
            logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–∫—É–ø–∫–∏ –Ω–æ–º–µ—Ä–∞ –¥–ª—è {user_id}: {e}. –í–æ–∑–≤—Ä–∞—â–∞—é —Å—Ä–µ–¥—Å—Ç–≤–∞.")
            self.db.create_transaction(user_id, cost, 'refund', f"–í–æ–∑–≤—Ä–∞—Ç –∏–∑-–∑–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–π –æ—à–∏–±–∫–∏: {e}")
            await callback_query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –í–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ —Å—É–º–º—É –ø–æ–∫—É–ø–∫–∏.")

    async def poll_for_sms(self, callback_query: CallbackQuery, tzid: int):
        max_wait_time = 300
        poll_interval = 5
        elapsed_time = 0

        while elapsed_time < max_wait_time:
            await asyncio.sleep(poll_interval)
            elapsed_time += poll_interval

            try:
                state = await self.api.get_state(tzid)
                if state.get("response") == "1" and state.get("msg"):
                    sms_code = state["msg"]
                    await callback_query.message.reply_text(f"‚úâÔ∏è **–ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ –°–ú–°!**\n\n–ö–æ–¥: `{sms_code}`")
                    await self.api.set_operation_ok(tzid)
                    return
                elif state.get("response") == "ERROR_NO_OPERATIONS":
                     await callback_query.message.reply_text("–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–æ –∏–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                     return
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –°–ú–° (tzid: {tzid}): {e}")

        await callback_query.message.reply_text("–û–∂–∏–¥–∞–Ω–∏–µ –°–ú–° –∑–∞–≤–µ—Ä—à–µ–Ω–æ (5 –º–∏–Ω—É—Ç).")
        await self.api.set_operation_ok(tzid)
