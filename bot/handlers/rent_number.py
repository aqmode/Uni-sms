import logging
import datetime
from pyrogram import Client, filters
from pyrogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from pyrogram.handlers import CallbackQueryHandler
from bot.api import SmsActivateWrapper
from bot.db import Database
from bot.utils import create_paginated_keyboard

# Simple cache for the rent tariffs
RENT_TARIFFS_CACHE = {}

class RentNumberHandlers:
    def __init__(self, db: Database, api: SmsActivateWrapper):
        self.db = db
        self.api = api

    def get_handlers(self):
        return [
            CallbackQueryHandler(self.show_rent_countries, filters.regex("^rent_menu$")),
            CallbackQueryHandler(self.show_rent_countries_paginated, filters.regex(r"^rent_country_page:(\d+)$")),
            CallbackQueryHandler(self.show_rent_services, filters.regex(r"^rent_country:(\d+)$")),
            CallbackQueryHandler(self.rent_number, filters.regex(r"^rent_service:(\d+):(.+)$")),
            CallbackQueryHandler(self.manage_rental, filters.regex(r"^manage_rent:(\d+)$")),
            CallbackQueryHandler(self.extend_rental, filters.regex(r"^extend_rent:(\d+)$")),
            CallbackQueryHandler(self.view_rental_sms, filters.regex(r"^view_rent_sms:(\d+)$")),
            CallbackQueryHandler(self.close_rental, filters.regex(r"^close_rent:(\d+)$")),
        ]

    async def _get_rent_tariffs(self):
        if not RENT_TARIFFS_CACHE:
            logging.info("–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∞—Ä–∏—Ñ–æ–≤ –Ω–∞ –∞—Ä–µ–Ω–¥—É —Å API...")
            tariffs = await self.api.get_rent_services_and_countries()
            if isinstance(tariffs, dict):
                RENT_TARIFFS_CACHE.update(tariffs)
            else:
                raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∞—Ä–∏—Ñ—ã –Ω–∞ –∞—Ä–µ–Ω–¥—É: {tariffs}")
        return RENT_TARIFFS_CACHE

    async def show_rent_countries(self, client: Client, callback_query: CallbackQuery, page=0):
        await callback_query.answer("–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω –¥–ª—è –∞—Ä–µ–Ω–¥—ã...")
        try:
            tariffs = await self._get_rent_tariffs()
            # The API returns a dict of country IDs to country names
            countries = tariffs.get("countries", {})
            buttons = [(name, f"rent_country:{id}") for id, name in countries.items()]

            keyboard = create_paginated_keyboard(buttons, page, 15, "rent_country_page")
            keyboard.inline_keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
            await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –∞—Ä–µ–Ω–¥—ã:", reply_markup=keyboard)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω –¥–ª—è –∞—Ä–µ–Ω–¥—ã: {e}")
            await callback_query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω –¥–ª—è –∞—Ä–µ–Ω–¥—ã.")

    async def show_rent_countries_paginated(self, client: Client, callback_query: CallbackQuery):
        page = int(callback_query.matches[0].group(1))
        await self.show_rent_countries(client, callback_query, page=page)

    async def show_rent_services(self, client: Client, callback_query: CallbackQuery):
        country_id = int(callback_query.matches[0].group(1))
        await callback_query.answer("–ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
        try:
            tariffs = await self._get_rent_tariffs()
            all_services = tariffs.get("services", {})
            # This API is complex. We'll show all services and assume they are available for the selected country.
            # A more robust solution would cross-reference with another endpoint if available.
            buttons = [(f"{details['search_name']} - {details['cost']} RUB/4—á", f"rent_service:{country_id}:{service_code}") for service_code, details in all_services.items()]

            keyboard = create_paginated_keyboard(buttons, 0, 10, f"rent_service_page:{country_id}")
            keyboard.inline_keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ç—Ä–∞–Ω–∞–º", callback_data="rent_menu")])
            await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–ª—è –∞—Ä–µ–Ω–¥—ã (—Ü–µ–Ω–∞ –∑–∞ 4 —á–∞—Å–∞):", reply_markup=keyboard)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –∞—Ä–µ–Ω–¥—ã: {e}")
            await callback_query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Ä–≤–∏—Å–æ–≤.")

    async def rent_number(self, client: Client, callback_query: CallbackQuery):
        country_id = int(callback_query.matches[0].group(1))
        service_code = callback_query.matches[0].group(2)
        user_id = callback_query.from_user.id
        rent_time = 4 # Default 4 hours

        await callback_query.message.edit_text("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–µ–Ω–¥—ã...")
        try:
            tariffs = await self._get_rent_tariffs()
            cost_rub = float(tariffs["services"][service_code]['cost'])
            cost_kopecks = int(cost_rub * 100)
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –∞—Ä–µ–Ω–¥—ã: {e}")
            await callback_query.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–Ω—É.")
            return

        if not self.db.create_transaction(user_id, -cost_kopecks, 'rental', f"–ê—Ä–µ–Ω–¥–∞ {service_code}"):
            await callback_query.message.edit_text("‚ùå **–ê—Ä–µ–Ω–¥–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å!**\n–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üë§ –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="account_menu")]]))
            return

        try:
            rental_data = await self.api.get_rent_number(service_code, country_id, rent_time)
            if rental_data.get("status") == "success":
                phone_info = rental_data["phone"]
                activation_id = phone_info["id"]
                self.db.log_rental(user_id, activation_id, service_code, str(country_id), phone_info["number"], phone_info["endDate"])
                await callback_query.message.edit_text(f"‚úÖ **–ê—Ä–µ–Ω–¥–∞ —É—Å–ø–µ—à–Ω–∞!**\n\n**–ù–æ–º–µ—Ä:** `{phone_info['number']}`\n**–ò—Å—Ç–µ–∫–∞–µ—Ç:** {phone_info['endDate']}", reply_markup=self.get_rental_management_keyboard(activation_id))
            else:
                self.db.create_transaction(user_id, cost_kopecks, 'refund', f"–í–æ–∑–≤—Ä–∞—Ç –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∞—Ä–µ–Ω–¥—ã: {rental_data}")
                await callback_query.message.edit_text(f"‚ùå **–ê—Ä–µ–Ω–¥–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å!**\n–ü—Ä–∏—á–∏–Ω–∞: `{rental_data}`. –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.")
        except Exception as e:
            self.db.create_transaction(user_id, cost_kopecks, 'refund', f"–í–æ–∑–≤—Ä–∞—Ç –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: {e}")
            await callback_query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.")

    def get_rental_management_keyboard(self, tzid):
        # Simplified: extend is always for 4 hours more
        return InlineKeyboardMarkup([
            [InlineKeyboardButton("üëÅÔ∏è –°–º–æ—Ç—Ä–µ—Ç—å –°–ú–°", callback_data=f"view_rent_sms:{tzid}")],
            [InlineKeyboardButton("‚ûï –ü—Ä–æ–¥–ª–∏—Ç—å (4 —á–∞—Å–∞)", callback_data=f"extend_rent:{tzid}")],
            [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å –∞—Ä–µ–Ω–¥—É", callback_data=f"close_rent:{tzid}")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
        ])

    async def manage_rental(self, client: Client, callback_query: CallbackQuery):
        tzid = int(callback_query.matches[0].group(1))
        await callback_query.message.edit_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥–æ–π:", reply_markup=self.get_rental_management_keyboard(tzid))

    async def extend_rental(self, client: Client, callback_query: CallbackQuery):
        tzid = int(callback_query.matches[0].group(1))
        await callback_query.answer("–ü—Ä–æ–¥–ª–µ–≤–∞—é –∞—Ä–µ–Ω–¥—É...")
        # A full implementation would first get the price for extension and charge the user
        try:
            response = await self.api.continue_rent_number(tzid, rent_time=4)
            if response.get("status") == "success":
                await callback_query.message.edit_text(f"–ê—Ä–µ–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞ –¥–æ {response['phone']['endDate']}!", reply_markup=self.get_rental_management_keyboard(tzid))
            else:
                await callback_query.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å: {response}", show_alert=True)
        except Exception as e:
            await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

    async def view_rental_sms(self, client: Client, callback_query: CallbackQuery):
        tzid = int(callback_query.matches[0].group(1))
        await callback_query.answer("–ó–∞–≥—Ä—É–∂–∞—é –°–ú–°...", cache_time=5)
        try:
            state = await self.api.get_rent_status(tzid)
            if state.get("status") == "success" and state.get("values"):
                sms_list = "\n".join([f"- `{v['text']}` (–æ—Ç `{v['phoneFrom']}`)" for k, v in state["values"].items()])
                await client.send_message(callback_query.from_user.id, f"**–ò—Å—Ç–æ—Ä–∏—è –°–ú–° –¥–ª—è –∞—Ä–µ–Ω–¥—ã {tzid}:**\n{sms_list}")
            else:
                await callback_query.answer("–î–ª—è —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –µ—â–µ –Ω–µ –±—ã–ª–æ –°–ú–°.", show_alert=True)
        except Exception as e:
            await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –°–ú–°.", show_alert=True)

    async def close_rental(self, client: Client, callback_query: CallbackQuery):
        tzid = int(callback_query.matches[0].group(1))
        await callback_query.answer("–ó–∞–∫—Ä—ã–≤–∞—é –∞—Ä–µ–Ω–¥—É...")
        try:
            response = await self.api.set_rent_status(tzid, 2) # 2 = cancel
            if response.get("status") == "success":
                await callback_query.message.edit_text("–ê—Ä–µ–Ω–¥–∞ –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞.")
            else:
                await callback_query.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å: {response}", show_alert=True)
        except Exception as e:
            await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)
