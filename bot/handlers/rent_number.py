import logging
import datetime
from pyrogram import Client, filters
from pyrogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from pyrogram.handlers import CallbackQueryHandler
from bot.api import OnlineSimAPI
from bot.db import Database
from bot.utils import create_paginated_keyboard
from bot.cache import get_rent_tariffs

class RentNumberHandlers:
    def __init__(self, db: Database, api: OnlineSimAPI):
        self.db = db
        self.api = api

    def get_handlers(self):
        return [
            CallbackQueryHandler(self.show_rent_countries, filters.regex("^rent_menu$")),
            CallbackQueryHandler(self.show_rent_countries_paginated, filters.regex(r"^rent_country_page:(\d+)$")),
            CallbackQueryHandler(self.show_rent_services, filters.regex(r"^rent_country:(\d+)$")),
            CallbackQueryHandler(self.confirm_rental, filters.regex(r"^rent_service:(\d+):(.+)$")),
            CallbackQueryHandler(self.manage_rental, filters.regex(r"^manage_rent:(\d+)$")),
            CallbackQueryHandler(self.extend_rental, filters.regex(r"^extend_rent:(\d+)$")),
            CallbackQueryHandler(self.view_rental_sms, filters.regex(r"^view_rent_sms:(\d+)$")),
            CallbackQueryHandler(self.close_rental, filters.regex(r"^close_rent:(\d+)$")),
        ]

    async def show_rent_countries(self, client: Client, callback_query: CallbackQuery, page=0):
        await callback_query.answer("–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω...")
        try:
            rent_tariffs = get_rent_tariffs()
            buttons = [(f"üóì {c['name']}", f"rent_country:{c['id']}") for c in rent_tariffs.get("list", [])]
            keyboard = create_paginated_keyboard(buttons, page, 15, "rent_country_page")
            keyboard.inline_keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
            await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –∞—Ä–µ–Ω–¥—ã:", reply_markup=keyboard)
        except Exception as e:
            error_text = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω –¥–ª—è –∞—Ä–µ–Ω–¥—ã. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —Å–æ–∑–¥–∞–ª–∏ —Ñ–∞–π–ª `tariffs.json`, –∑–∞–ø—É—Å—Ç–∏–≤ `python fetch_tariffs.py`."
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω –¥–ª—è –∞—Ä–µ–Ω–¥—ã: {e}")
            if callback_query.message.text != error_text:
                await callback_query.message.edit_text(error_text)

    async def show_rent_countries_paginated(self, client: Client, callback_query: CallbackQuery):
        page = int(callback_query.matches[0].group(1))
        await self.show_rent_countries(client, callback_query, page=page)

    async def show_rent_services(self, client: Client, callback_query: CallbackQuery):
        country_id = int(callback_query.matches[0].group(1))
        await callback_query.answer("–ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
        try:
            rent_tariffs = get_rent_tariffs()
            country_info = next((c for c in rent_tariffs.get("list", []) if c['id'] == country_id), None)
            if not country_info or not country_info.get("services"):
                await callback_query.message.edit_text("–î–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω—ã –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –∞—Ä–µ–Ω–¥—ã.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ç—Ä–∞–Ω–∞–º", callback_data="rent_menu")]]))
                return
            buttons = [(f"{s.capitalize()} - {d['price']} RUB/–º–µ—Å.", f"rent_service:{country_id}:{s}") for s, d in country_info["services"].items()]
            keyboard = create_paginated_keyboard(buttons, 0, 15, f"rent_service_page:{country_id}")
            keyboard.inline_keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ç—Ä–∞–Ω–∞–º", callback_data="rent_menu")])
            await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–ª—è –∞—Ä–µ–Ω–¥—ã:", reply_markup=keyboard)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –∞—Ä–µ–Ω–¥—ã: {e}")
            await callback_query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Ä–≤–∏—Å–æ–≤.")

    async def confirm_rental(self, client: Client, callback_query: CallbackQuery):
        country_id = int(callback_query.matches[0].group(1))
        service = callback_query.matches[0].group(2)
        user_id = callback_query.from_user.id
        days = 30

        await callback_query.message.edit_text("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–µ–Ω–¥—ã...")
        try:
            rent_tariffs = get_rent_tariffs()
            country_info = next((c for c in rent_tariffs.get("list", []) if c['id'] == country_id), None)
            cost_rub = float(country_info["services"][service]['price'])
            cost_kopecks = int(cost_rub * 100)
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –∞—Ä–µ–Ω–¥—ã –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ {service}: {e}")
            await callback_query.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–Ω—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        transaction_success = self.db.create_transaction(user_id, -cost_kopecks, 'rental', f"–ü–æ–ø—ã—Ç–∫–∞ –∞—Ä–µ–Ω–¥—ã {service} –Ω–∞ {days} –¥–Ω–µ–π –≤ —Å—Ç—Ä–∞–Ω–µ {country_id}")
        if not transaction_success:
            await callback_query.message.edit_text("‚ùå **–ê—Ä–µ–Ω–¥–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å!**\n\n–ù–∞ –≤–∞—à–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üë§ –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="account_menu")]]))
            return

        try:
            rental_data = await self.api.get_rent_num(service, country_id, days)
            if rental_data.get("response") == "1":
                tzid = rental_data["tzid"]
                phone = rental_data["phone"]
                expires_at = datetime.datetime.now() + datetime.timedelta(days=days)
                self.db.log_rental(user_id, tzid, service, str(country_id), phone, expires_at)
                await callback_query.message.edit_text(f"‚úÖ **–ê—Ä–µ–Ω–¥–∞ —É—Å–ø–µ—à–Ω–∞!**\n\n**–ù–æ–º–µ—Ä:** `{phone}`\n**–ò—Å—Ç–µ–∫–∞–µ—Ç:** {expires_at.strftime('%Y-%m-%d %H:%M')}", reply_markup=self.get_rental_management_keyboard(tzid))
            else:
                error = rental_data.get('error_msg', 'Unknown error')
                logging.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –∞—Ä–µ–Ω–¥–µ –¥–ª—è {user_id}: {error}. –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤.")
                self.db.create_transaction(user_id, cost_kopecks, 'refund', f"–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∞—Ä–µ–Ω–¥—ã. –ü—Ä–∏—á–∏–Ω–∞: {error}")
                await callback_query.message.edit_text(f"‚ùå **–ê—Ä–µ–Ω–¥–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å!**\n–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: `{error}`. –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.")
        except Exception as e:
            logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä–µ–Ω–¥–µ –¥–ª—è {user_id}: {e}. –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤.")
            self.db.create_transaction(user_id, cost_kopecks, 'refund', f"–í–æ–∑–≤—Ä–∞—Ç –∏–∑-–∑–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–π –æ—à–∏–±–∫–∏: {e}")
            await callback_query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.")

    def get_rental_management_keyboard(self, tzid):
        return InlineKeyboardMarkup([
            [InlineKeyboardButton("üëÅÔ∏è –°–º–æ—Ç—Ä–µ—Ç—å –°–ú–°", callback_data=f"view_rent_sms:{tzid}"), InlineKeyboardButton("‚ûï –ü—Ä–æ–¥–ª–∏—Ç—å (30 –¥–Ω–µ–π)", callback_data=f"extend_rent:{tzid}")],
            [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å –∞—Ä–µ–Ω–¥—É", callback_data=f"close_rent:{tzid}")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
        ])

    async def manage_rental(self, client: Client, callback_query: CallbackQuery):
        tzid = int(callback_query.matches[0].group(1))
        await callback_query.message.edit_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥–æ–π:", reply_markup=self.get_rental_management_keyboard(tzid))

    async def extend_rental(self, client: Client, callback_query: CallbackQuery):
        tzid = int(callback_query.matches[0].group(1))
        days_to_extend = 30
        await callback_query.answer("–ü—Ä–æ–¥–ª–µ–≤–∞—é –∞—Ä–µ–Ω–¥—É...")
        # Note: a real implementation would need to charge the user's internal balance here as well.
        try:
            response = await self.api.extend_rent_state(tzid, days_to_extend)
            if response.get("response") == "1":
                await callback_query.message.edit_text("–ê—Ä–µ–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞!", reply_markup=self.get_rental_management_keyboard(tzid))
            else:
                await callback_query.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å: {response.get('error_msg')}", show_alert=True)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –∞—Ä–µ–Ω–¥—ã: {e}")
            await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

    async def view_rental_sms(self, client: Client, callback_query: CallbackQuery):
        tzid = int(callback_query.matches[0].group(1))
        await callback_query.answer("–ó–∞–≥—Ä—É–∂–∞—é –°–ú–°...")
        try:
            state = await self.api.get_rent_state(tzid)
            if state.get("response") == "1" and state.get("messages"):
                sms_list = "\n".join([f"- `{msg['msg']}` (–æ—Ç `{msg['from']}` –≤ {msg['date']})" for msg in state["messages"]])
                await callback_query.answer(f"–ò—Å—Ç–æ—Ä–∏—è –°–ú–°:\n{sms_list}", show_alert=True, cache_time=5)
            else:
                await callback_query.answer("–î–ª—è —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –µ—â–µ –Ω–µ –±—ã–ª–æ –°–ú–°.", show_alert=True)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –°–ú–° –¥–ª—è –∞—Ä–µ–Ω–¥—ã: {e}")
            await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –°–ú–°.", show_alert=True)

    async def close_rental(self, client: Client, callback_query: CallbackQuery):
        tzid = int(callback_query.matches[0].group(1))
        await callback_query.answer("–ó–∞–∫—Ä—ã–≤–∞—é –∞—Ä–µ–Ω–¥—É...")
        try:
            response = await self.api.close_rent_num(tzid)
            if response.get("response") == "1":
                await callback_query.message.edit_text("–ê—Ä–µ–Ω–¥–∞ –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞.")
            else:
                await callback_query.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å: {response.get('error_msg')}", show_alert=True)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∞—Ä–µ–Ω–¥—ã: {e}")
            await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)
